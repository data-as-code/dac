import tempfile
import re
import subprocess
from typing import Optional
from pathlib import Path


def find_latest_version(pkg_name: str, major: Optional[int] = None) -> str:
    pip_log = _pretend_pip_install(pkg_name=pkg_name, major=major)
    would_install_line = _extract_would_install_line(pip_log=pip_log)
    package_with_version = _extract_package_with_version(
        pip_log_would_install_line=would_install_line, pkg_name=pkg_name, major=major
    )
    return package_with_version[len(f"{pkg_name}-") :]


def increase_minor(version: str) -> str:
    major, minor, patch = version.split(".")
    assert major.isdigit() and minor.isdigit()
    return f"{major}.{int(minor) + 1}.0"


def _pretend_pip_install(pkg_name: str, major: Optional[int]) -> str:
    with tempfile.NamedTemporaryFile() as log_file:
        result = subprocess.run(
            [
                "pip",
                "install",
                "--no-deps",
                "--ignore-installed",
                "--dry-run",
                f"--log={log_file.name}",
                f"{pkg_name}{f'=={major}.*' if major is not None else ''}",
            ],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        if result.returncode != 0:
            raise subprocess.SubprocessError(
                f"Something went wrong while using pip to find the version of {pkg_name}{f'(major version {major})' if major else ''}.\n\nSTDOUT: {result.stdout}\n\nSTDERR: {result.stderr}"
            )
        return Path(log_file.name).read_text()


def _extract_would_install_line(pip_log: str) -> str:
    would_install_lines = [line for line in pip_log.splitlines() if "Would install" in line]
    assert (
        len(would_install_lines) == 1
    ), f"Expected exactly one line containing 'Would install' in the pip log generated by pip installing the requested package, but found {len(would_install_lines)} lines."
    return would_install_lines[0]


def _extract_package_with_version(pip_log_would_install_line: str, pkg_name: str, major: Optional[int]) -> str:
    regex_rule = f"{pkg_name.replace('_', '-')}-{major if major is not None else ''}.[^ ]+"
    match = re.search(regex_rule, pip_log_would_install_line.replace("_", "-"))
    assert (
        match is not None and match[0] != ""
    ), f"It was not possible to determine the version, because we could not find a match to the regex {regex_rule} in {pip_log_would_install_line.replace('_', '-')}"
    return match[0]
